================================================================================
comments
================================================================================

# This is a comment.

/*
This is also a comment.
*/

"This is a string."

--------------------------------------------------------------------------------

(source_expression
  (comment)
  (comment)
  (string))

================================================================================
identifier
================================================================================

abc

--------------------------------------------------------------------------------

(source_expression
  (variable))

================================================================================
integer
================================================================================

123

--------------------------------------------------------------------------------

(source_expression
  (integer))

================================================================================
float
================================================================================

123.456

--------------------------------------------------------------------------------

(source_expression
  (float))

================================================================================
uri
================================================================================

http://foobar.com:80?baz=quux&blarg=etc

--------------------------------------------------------------------------------

(source_expression
  (uri))

================================================================================
list (empty)
================================================================================

[ ]

--------------------------------------------------------------------------------

(source_expression
  (list))

================================================================================
list
================================================================================

[ a 1 2.0 ]

--------------------------------------------------------------------------------

(source_expression
  (list
    (variable)
    (integer)
    (float)))

================================================================================
if
================================================================================

if a then b else c

--------------------------------------------------------------------------------

(source_expression
  (if
    (variable)
    (variable)
    (variable)))

================================================================================
assert
================================================================================

assert a; b

--------------------------------------------------------------------------------

(source_expression
  (assert
    (variable)
    (variable)))

================================================================================
with
================================================================================

with a; b

--------------------------------------------------------------------------------

(source_expression
  (with
    (variable)
    (variable)))

================================================================================
let (empty)
================================================================================

let in a

--------------------------------------------------------------------------------

(source_expression
  (let
    (variable)))

================================================================================
let (bind)
================================================================================

let a = b; in c

--------------------------------------------------------------------------------

(source_expression
  (let
    (bind
      (attrpath
        (identifier))
      (variable))
    (variable)))

================================================================================
let (bind, comments)
================================================================================

let
  # foo
  a = b;
  # bar
  x = y;
  in
    # baz
    c

--------------------------------------------------------------------------------

(source_expression
  (let
    (comment)
    (bind
      (attrpath
        (identifier))
      (variable))
    (comment)
    (bind
      (attrpath
        (identifier))
      (variable))
    (comment)
    (variable)))

================================================================================
let (inherit)
================================================================================

let inherit a; in c

--------------------------------------------------------------------------------

(source_expression
  (let
    (inherit
      (identifier))
    (variable)))

================================================================================
let (inherit from)
================================================================================

let inherit (a) b "c" ${d}; in 123

--------------------------------------------------------------------------------

(source_expression
  (let
    (inherit_from
      (variable)
      (identifier)
      (string)
      (interpolation
        (variable)))
    (integer)))

================================================================================
function
================================================================================

a: b

--------------------------------------------------------------------------------

(source_expression
  (function
    (identifier)
    (variable)))

================================================================================
function (with formals)
================================================================================

a@{ /*1*/ b, /*2*/ c ? 123, /*3*/ ... }: 1.234

--------------------------------------------------------------------------------

(source_expression
  (function
    (identifier)
    (formals
      (comment)
      (formal
        (identifier))
      (comment)
      (formal
        (identifier)
        (integer))
      (comment)
      (ellipses))
    (float)))

================================================================================
rec. attrset (empty)
================================================================================

rec { }

--------------------------------------------------------------------------------

(source_expression
  (rec_attrset))

================================================================================
let attrset (empty)
================================================================================

let { }

--------------------------------------------------------------------------------

(source_expression
  (let_attrset))

================================================================================
attrset (empty)
================================================================================

{ }

--------------------------------------------------------------------------------

(source_expression
  (attrset))

================================================================================
attr set
================================================================================

{ a = 1; ${b} = "quux"; "c" = 3.14; x.y.z = <foo>; }

--------------------------------------------------------------------------------

(source_expression
  (attrset
    (bind
      (attrpath
        (identifier))
      (integer))
    (bind
      (attrpath
        (interpolation
          (variable)))
      (string))
    (bind
      (attrpath
        (string))
      (float))
    (bind
      (attrpath
        (identifier)
        (identifier)
        (identifier))
      (path))))

================================================================================
select
================================================================================

u.v.${w}."x${y}z"

--------------------------------------------------------------------------------

(source_expression
  (select
    (variable)
    (attrpath
      (identifier)
      (interpolation
        (variable))
      (string
        (interpolation
          (variable))))))

================================================================================
application
================================================================================

a 1 2.0

--------------------------------------------------------------------------------

(source_expression
  (app
    (app
      (variable)
      (integer))
    (float)))

================================================================================
application with select
================================================================================

foo.bar bar.baz

--------------------------------------------------------------------------------

(source_expression
  (app
    (select
      (variable)
      (attrpath
        (identifier)))
    (select
      (variable)
      (attrpath
        (identifier)))))

================================================================================
operators
================================================================================

square 2 + -pi - 42.0

--------------------------------------------------------------------------------

(source_expression
  (binary
    (binary
      (app
        (variable)
        (integer))
      (unary
        (variable)))
    (float)))

================================================================================
parens
================================================================================

(123)

--------------------------------------------------------------------------------

(source_expression
  (parenthesized
    (integer)))

================================================================================
has attr
================================================================================

foo ? field ? bar."baz".${bax}

--------------------------------------------------------------------------------

(source_expression
  (has_attr
    (has_attr
      (variable)
      (attrpath
        (identifier)))
    (attrpath
      (identifier)
      (string)
      (interpolation
        (variable)))))
